# REST API references
# HEIG-VD - AMT - Gamification
# For more informations about this API: https://github.com/moodah/AMT_Gamification
swagger: '2.0'
info:
  title: Gamification
  description: REST API for the Gamification project, see https://github.com/moodah/AMT_Gamification for more informations.
  version: "1.0.0"
# the domain of the service
host: localhost
# array of all schemes that your API supports
schemes:
  - http
  - https
# will be prefixed to all paths
basePath: /gamification
consumes:
  - application/json
produces:
  - application/json
paths:
  /applications:
    post:
      summary: Register a new application
      description: The Applications endpoint allows to register a new application in the plateform
      parameters:
        - name: application
          in: body
          description: The application informations
          required: true
          schema:
            $ref: '#/definitions/Application'
      tags:
        - Application
      responses:
        201:
          description: Application registered
        default:
          description: Error
          schema:
            $ref: '#/definitions/Error'
  /applications/auth:
    post:
      summary: Get the application token
      description: The Applications/Auth endpoint returns the application token
      parameters:
        - name: application
          in: body
          description: The application informations
          required: true
          schema:
            $ref: '#/definitions/Application'
      tags:
        - Application
      responses:
        200:
          description: Application registered
          schema:
            $ref: '#/parameters/Token'
        default:
          description: Error
          schema:
            $ref: '#/definitions/Error'
  /users/{id}:
    get:
      summary: Get a user's reputation
      description: The Users endpoint returns the reputation of the user defined by the parameter {id}
      parameters:
        - name: id
          in: path
          description: The user's ID
          required: true
          type: number
          format: int32
        - name: filter
          in: query
          description: Filter the desired Reputation members 
          required: false
          type: array
          items:
            type: string
      tags:
        - Users
      responses:
        200:
          description: Requested user reputation
          schema:
              $ref: '#/definitions/Reputation'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /leaderboards:
    get:
      summary: Get top users
      description: The Leaderboards endpoint returns a list of the top users.
      parameters:
        - name: page
          in: query
          default: 1
          description: The page number
          required: false
          type: number
          format: integer
        - name: per_page
          in: query
          default: 10
          description: Number of result per page
          required: false
          type: number
          format: integer
      tags:
        - Leaderboards
      responses:
        200:
          description: An array of users, ordered by their global reputation
          schema:
              $ref: '#/definitions/Reputation'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /events:
    post:
      summary: Events generated by the client
      description: The Events endpoint allows the client to submit new events occuring in his app
      parameters:
        - name: event
          in: body
          schema:
            $ref: '#/definitions/Event'
          required: true
        - $ref: '#/parameters/Token'
      tags:
        - Events
      responses:
        201:
          description: Newly created event
          schema: 
            $ref: '#/definitions/Event'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /rules:
    get:
      summary: Get Gamification rules
      description: The Rules endpoint returns the rules defined by the client
      parameters:
        - $ref: '#/parameters/Token'
      tags:
        - Rules
      responses:
        200:
          description: An array of rules
          schema:
            type: array
            items:
              $ref: '#/definitions/Rule'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      summary: Create Gamification rules
      description: The Rules endpoint allows the client to submit new rules
      tags:
        - Rules
      parameters:
        - name: rule
          in: body
          required: true
          schema:
            $ref: '#/definitions/Rule'
        - $ref: '#/parameters/Token'
      responses:
        201:
          description: Newly created rule
          schema:
            $ref: '#/definitions/Rule'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      summary: Delete all rules
      description: Delete all rules for this application
      tags:
        - Rules
      parameters:
        - name: id
          in: query
          required: true
          type: number
          format: int32
        - $ref: '#/parameters/Token'
      responses:
        204:
          description: Void
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /rules/{id}:
    get:
      summary: Get a rule specified by {id}
      description: Get a rule specified by {id}
      tags:
        - Rules
      parameters:
        - name: id
          in: path
          required: true
          type: number
          format: int32
        - $ref: '#/parameters/Token'
      responses:
        200:
          description: Requested rule
          schema:
            $ref: '#/definitions/Rule'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      summary: Delete the rule with {id}
      description: Delete the rule with {id}
      tags:
        - Rules
      parameters:
        - name: id
          in: path
          required: true
          type: number
          format: int32
        - $ref: '#/parameters/Token'
      responses:
        204:
          description: Void
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    patch:
      summary: Update rules with {id}
      description: Update rules with {id}
      tags:
        - Rules
      parameters:
        - name: id
          in: path
          required: true
          type: number
          format: int32Â¨
        - $ref: '#/parameters/Token'
      responses:
        204:
          description: Updated rule
          schema:
            $ref: '#/definitions/Rule'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /levels:
    get:
      summary: Get Gamification levels
      description: The levels endpoint returns the levels defined by the client
      tags:
        - Levels
      parameters:
       - $ref: '#/parameters/Token'
      responses:
        200:
          description: An array of levels
          schema:
            type: array
            items:
              $ref: '#/definitions/Level'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      summary: Create Gamification levels
      description: The levels endpoint allows the client to submit new levels
      tags:
        - Levels
      parameters:
        - name: level
          in: body
          required: true
          schema:
            $ref: '#/definitions/Level'
        - $ref: '#/parameters/Token'
      responses:
        201:
          description: Newly created level
          schema:
            $ref: '#/definitions/Level'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      summary: Delete all levels
      description: Delete all levels for this application
      tags:
        - Levels
      parameters:
        - name: id
          in: query
          required: true
          type: number
          format: int32
        - $ref: '#/parameters/Token'
      responses:
        204:
          description: Void
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /levels/{id}:
    get:
      summary: Get level with this {id}
      description: Get level with this {id}
      tags:
        - Levels
      parameters:
        - name: id
          in: path
          required: true
          type: number
          format: int32
        - $ref: '#/parameters/Token'
      responses:
        200:
          description: Requested level
          schema:
            $ref: '#/definitions/Level'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      summary: Delete the level with {id}
      description: Delete the level with {id}
      tags:
        - Levels
      parameters:
        - name: id
          in: path
          required: true
          type: number
          format: int32
        - $ref: '#/parameters/Token'
      responses:
        204:
          description: Void
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    patch:
      summary: Update the level with {id}
      description: Update the level with {id}
      tags:
        - Levels
      parameters:
        - name: id
          in: path
          required: true
          type: number
          format: int32
        - $ref: '#/parameters/Token'
      responses:
        200:
          description: Updated level
          schema:
            $ref: '#/definitions/Level'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /badges:
    get:
      summary: Get Gamification badges
      description: The badges endpoint returns the badges defined by the client
      tags:
        - Badges
      parameters:
        - $ref: '#/parameters/Token'
      responses:
        200:
          description: An array of badges
          schema:
            type: array
            items:
              $ref: '#/definitions/Badge'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      summary: Create Gamification badges
      description: The badges endpoint allows the client to submit new badges
      tags:
        - Badges
      parameters:
        - name: badge
          in: body
          required: true
          schema:
            $ref: '#/definitions/Badge'
        - $ref: '#/parameters/Token'
      responses:
        201:
          description: Newly created badge
          schema: 
            $ref: '#/definitions/Badge'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      summary: Delete all badges
      description:  Delete all badges for this application
      tags:
        - Badges
      parameters:
        - name: id
          in: query
          required: true
          type: number
          format: int32
        - $ref: '#/parameters/Token'
      responses:
        204:
          description: Void
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /badges/{id}:
    get:
      summary: Get badge with {id}
      description: Get badge with {id}
      tags:
        - Badges
      parameters:
        - name: id
          in: path
          required: true
          type: number
          format: int32
        - $ref: '#/parameters/Token'
      responses:
        200:
          description: Requested badge
          schema:
            $ref: '#/definitions/Badge'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      summary: Delete badge with {id}
      description: Delete badge with {id}
      tags:
        - Badges
      parameters:
        - name: id
          in: path
          required: true
          type: number
          format: int32
        - $ref: '#/parameters/Token'
      responses:
        204:
          description: Void
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    patch:
      summary: Update badge with {id}
      description: Update
      tags:
        - Badges
      parameters:
        - name: id
          in: path
          required: true
          type: number
          format: int32
        - $ref: '#/parameters/Token'
      responses:
        200:
          description: Updated badge
          schema:
            $ref: '#/definitions/Badge'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
            
parameters:
  Token:
    name: token
    in: header
    description: Authorization header JWT
    required: true
    type: string
    
  
definitions:
  Application:
    type: object
    properties:
      name:
        type: string
      password:
        type: string

  Error:
    type: object
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
      fields:
        type: string
        
  Reputation:
    type: object
    properties:
      name:
        type: string
        
  Rule:
    type: object
    properties:
      name:
        type: string
      operator:
        type: string
      points:
        type: number
        format: int32
      badge_id:
        $ref: '#/definitions/Id'
  
  Level:
    type: object
    properties:
      number:
        type: number
        format: int32
      points:
        type: number
        format: int32
  
  Badge:
    type: object
    properties:
      name:
        type: string
  
  Event:
    type: object
    properties:
      timestamp:
        type: string
        format: date-time
      code:
        type: number
        format: int32
        
  Id:
    type: number
    format: int32