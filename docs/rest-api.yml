# REST API references
# HEIG-VD - AMT - Gamification
# For more informations about this API: https://github.com/moodah/AMT_Gamification
swagger: '2.0'
info:
  title: Gamification
  description: REST API for the Gamification project, see https://github.com/moodah/AMT_Gamification for more informations.
  version: "1.0.0"
# the domain of the service
host: localhost
# array of all schemes that your API supports
schemes:
  - http
  - https
# will be prefixed to all paths
basePath: /gamification
consumes:
  - application/json
produces:
  - application/json
paths:
  /applications:
    post:
      summary: Create a new application
      parameters:
        - name: Application
          in: body
          description: New application
          required: true
          schema:
            $ref: '#/definitions/Application'
      tags:
        - Applications
      responses:
        201:
          description: Application created
          schema:
            $ref: '#/definitions/Application'
  /applications/auth:
    post:
      summary: Get the application's token
      parameters:
        - name: Application
          in: body
          description: Requested application
          required: true
          schema:
            $ref: '#/definitions/Application'
      tags:
        - Applications
        - Authentication
      responses:
        201:
          description: Application token
          schema:
            $ref: '#/definitions/Token'
  /applications/{id}:
    get:
      summary: Get application with specified id
      parameters:
        - name: id
          in: path
          description: The applications's id
          required: true
          type: number
          format: int32
        - $ref: '#/parameters/Token'
      tags:
        - Applications
      responses:
        200:
          description: Requested application
          schema:
            $ref: '#/definitions/Application'
    patch:
      summary: Patch application with specified id
      parameters:
        - name: id
          in: path
          description: The applications's ID
          required: true
          type: number
          format: int32
        - $ref: '#/parameters/Token'
        - name: Application
          in: body
          description: Updated application
          required: true
          schema:
            $ref: '#/definitions/Application'
      responses:
        200:
          description: Application updated
          schema:
            $ref: '#/definitions/Application'
    delete:
      summary: Delete application with specified id
      parameters:
        - name: id
          in: path
          description: The applications's ID
          required: true
          type: number
          format: int32
        - $ref: '#/parameters/Token'
      tags:
        - Applications
      responses:
        204:
          description: Deleted successfully
  /users:
    get:
      summary: Get a list of all users of this application
      parameters:
        - $ref: '#/parameters/Token'
      tags:
        - Users
      responses:
        200:
          description: List of all users of this application
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
    post:
      summary: Create a new user
      parameters:
        - $ref: '#/parameters/Token'
        - name: User
          in: body
          description: New user
          required: true
          schema:
            $ref: '#/definitions/User'
      tags:
        - Users
      responses:
        201:
          description: User created
          schema:
            $ref: '#/definitions/User'
  /users/{id}:
    get:
      summary: Get user with specified id
      parameters:
        - name: id
          in: path
          description: The user's id
          required: true
          type: number
          format: int32
        - $ref: '#/parameters/Token'
      tags:
        - Users
      responses:
        200:
          description: Requested user
          schema:
              $ref: '#/definitions/User'
    patch:
      summary: Update user with specified id
      parameters:
        - name: id
          in: path
          description: The user's ID
          required: true
          type: number
          format: int32
        - $ref: '#/parameters/Token'
        - name: User
          in: body
          description: Updated user
          required: true
          schema:
            $ref: '#/definitions/User'
      tags:
        - Users
      responses:
        200:
          description: User updated
          schema:
            $ref: '#/definitions/User'
    delete:
      summary: Delete a user
      description: Delete the user with given id
      parameters:
        - name: id
          in: path
          description: The user's id
          required: true
          type: number
          format: int32
        - $ref: '#/parameters/Token'
      tags:
        - Users
      responses:
        204:
          description: Deleted successfully
  /leaderboards:
    get:
      summary: Get a list of top users
      parameters:
        - name: page
          in: query
          default: 1
          description: The page number
          required: false
          type: number
          format: integer
        - name: per_page
          in: query
          default: 10
          description: Number of result per page
          required: false
          type: number
          format: integer
        - $ref: '#/parameters/Token'
      tags:
        - Leaderboards
        - Users
      responses:
        200:
          description: An list of users, ordered by their global reputation
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
  /events:
    post:
      summary: Create a new event (should be called automatically by the gamified application)
      parameters:
        - $ref: '#/parameters/Token'
        - name: Event
          description: New event
          in: body
          schema:
            $ref: '#/definitions/Event'
          required: true
      tags:
        - Events
      responses:
        201:
          description: Event created
          schema: 
            $ref: '#/definitions/Event'
  /levels:
    get:
      summary: Get application levels
      tags:
        - Levels
      parameters:
       - $ref: '#/parameters/Token'
      responses:
        200:
          description: A list of application levels
          schema:
            type: array
            items:
              $ref: '#/definitions/Level'
    post:
      summary: Create a new level
      tags:
        - Levels
      parameters:
        - $ref: '#/parameters/Token'
        - name: Level
          in: body
          required: true
          schema:
            $ref: '#/definitions/Level'
      responses:
        201:
          description: Level created
          schema:
            $ref: '#/definitions/Level'
  /levels/{id}:
    get:
      summary: Get level with this {id}
      description: Get level with this {id}
      tags:
        - Levels
      parameters:
        - name: id
          in: path
          required: true
          type: number
          format: int32
        - $ref: '#/parameters/Token'
      responses:
        200:
          description: Requested level
          schema:
            $ref: '#/definitions/Level'
    patch:
      summary: Update the level with specified id
      tags:
        - Levels
      parameters:
        - name: id
          in: path
          required: true
          type: number
          format: int32
        - $ref: '#/parameters/Token'
        - name: Level
          in: body
          required: true
          description: Updated level
          schema:
            $ref: '#/definitions/Level'
      responses:
        200:
          description: Level updated
          schema:
            $ref: '#/definitions/Level'
    delete:
      summary: Delete the level with specified id
      tags:
        - Levels
      parameters:
        - name: id
          in: path
          required: true
          type: number
          format: int32
        - $ref: '#/parameters/Token'
      responses:
        204:
          description: Deleted successfully
  /badges:
    get:
      summary: Get badges for this application
      tags:
        - Badges
      parameters:
        - $ref: '#/parameters/Token'
      responses:
        200:
          description: A list of badges
          schema:
            type: array
            items:
              $ref: '#/definitions/Badge'
    post:
      summary: Create a new badge
      tags:
        - Badges
      parameters:
        - $ref: '#/parameters/Token'
        - name: Badge
          in: body
          required: true
          schema:
            $ref: '#/definitions/Badge'
      responses:
        201:
          description: Badge created
          schema: 
            $ref: '#/definitions/Badge'
  /badges/{id}:
    get:
      summary: Get badge with specified id
      tags:
        - Badges
      parameters:
        - name: id
          in: path
          required: true
          type: number
          format: int32
        - $ref: '#/parameters/Token'
      responses:
        200:
          description: Requested badge
          schema:
            $ref: '#/definitions/Badge'
    patch:
      summary: Update badge with specified id
      tags:
        - Badges
      parameters:
        - name: id
          in: path
          required: true
          type: number
          format: int32
        - $ref: '#/parameters/Token'
        - name: Badge
          in: body
          required: true
          description: Updated badge
          schema:
            $ref: '#/definitions/Badge'
      responses:
        200:
          description: Badge updated
          schema:
            $ref: '#/definitions/Badge'
    delete:
      summary: Delete badge with specified
      tags:
        - Badges
      parameters:
        - name: id
          in: path
          required: true
          type: number
          format: int32
        - $ref: '#/parameters/Token'
      responses:
        204:
          description: Deleted successfully
  /eventtypes:
    get:
      summary: Get a list of eventtypes
      tags:
        - Eventtypes
      parameters:
        - $ref: '#/parameters/Token'
      responses:
        200:
          description: A list of eventtypes
          schema:
            type: array
            items:
              $ref: '#/definitions/Eventtype'
    post:
      summary: Create a new eventtype
      tags:
        - Eventtypes
      parameters:
        - $ref: '#/parameters/Token'
        - name: Eventtype
          in: body
          required: true
          description: New eventtype
          schema:
            $ref: '#/definitions/Eventtype'
      responses:
        201:
          description: Eventtype created
          schema:
            $ref: '#/definitions/Eventtype'
  /eventtypes/{id}:
    get:
      summary: Get eventtype with specified id
      tags:
        - Eventtypes
      parameters:
        - name: id
          in: path
          required: true
          type: number
          format: int32
        - $ref: '#/parameters/Token'
      responses:
        200:
          description: Requested eventtype
          schema:
            $ref: '#/definitions/Eventtype'
    patch:
      summary: Update eventtype with specified id
      tags:
        - Eventtypes
      parameters:
        - name: id
          in: path
          required: true
          type: number
          format: int32
        - $ref: '#/parameters/Token'
        - name: Eventtype
          in: body
          required: true
          description: Updated eventtype
          schema:
            $ref: '#/definitions/Eventtype'
      responses:
        200:
          description: Eventtype updated
          schema:
            $ref: '#/definitions/Eventtype'
    delete:
      summary: Delete eventtype with specified id
      tags:
        - Eventtypes
      parameters:
        - name: id
          in: path
          required: true
          type: number
          format: int32
        - $ref: '#/parameters/Token'
      responses:
        204:
          description: Deleted successfully
  /achievements:
    get:
      summary: Get a list of achievements for this application
      tags:
        - Achievements
      parameters:
        - $ref: '#/parameters/Token'
      responses:
        200:
          description: A list of achievements
          schema:
            type: array
            items:
              $ref : '#/definitions/Achievement'
    post:
      summary: Create a new achievement
      tags:
        - Achievements
      parameters:
        - $ref: '#/parameters/Token'
        - name: Achievement
          in: body
          required: true
          description: New achievement
          schema:
            $ref: '#/definitions/Achievement'
      responses:
        201:
          description: Achievement created
          schema:
            $ref: '#/definitions/Achievement'
  /achievements/{id}:
    get:
      summary: Get achievement with specified id
      tags:
        - Achievements
      parameters:
        - name: id
          in: path
          required: true
          type: number
          format: int32
        - $ref: '#/parameters/Token'
      responses:
        200:
          description: Requested achievement
          schema:
            $ref: '#/definitions/Achievement'
    patch:
      summary: Update achievement with specified
      tags:
        - Achievements
      parameters:
        - name: id
          in: path
          required: true
          type: number
          format: int32
        - $ref: '#/parameters/Token'
        - name: Achievement
          in: body
          required: true
          description: Updated achievement
          schema:
            $ref: '#/definitions/Achievement'
      responses:
        200:
          description: Achievement updated
          schema:
            $ref: '#/definitions/Achievement'
    delete:
      summary: Delete achievement with specified
      tags:
        - Achievements
      parameters:
        - name: id
          in: path
          required: true
          type: number
          format: int32
        - $ref: '#/parameters/Token'
      responses:
        204:
          description: Deleted successfully
  /badgeachievements:
    get:
      summary: Get a list of badgeachievements for this application
      tags:
        - Badgeachievements
      parameters:
        - $ref: '#/parameters/Token'
      responses:
        200:
          description: A list of badgeachievements
          schema:
            type: array
            items:
              $ref : '#/definitions/BadgeAchievement'
    post:
      summary: Create a new badgeachievement
      tags:
        - Badgeachievements
      parameters:
        - $ref: '#/parameters/Token'
        - name: Badgeachievement
          in: body
          required: true
          description: New badgeachievement
          schema:
            $ref: '#/definitions/BadgeAchievement'
      responses:
        201:
          description: Badgeachievement created
          schema:
            $ref: '#/definitions/BadgeAchievement'
            
  /badgeachievements/{id}:
    get:
      summary: Get badgeachievement with specified id
      tags:
        - Badgeachievements
      parameters:
        - name: id
          in: path
          required: true
          type: number
          format: int32
        - $ref: '#/parameters/Token'
      responses:
        200:
          description: Requested badgeachievement
          schema:
            $ref: '#/definitions/BadgeAchievement'
    patch:
      summary: Update badgeachievement with specified
      tags:
        - Badgeachievements
      parameters:
        - name: id
          in: path
          required: true
          type: number
          format: int32
        - $ref: '#/parameters/Token'
        - name: Badgeachievement
          in: body
          required: true
          description: Updated badgeachievement
          schema:
            $ref: '#/definitions/BadgeAchievement'
      responses:
        200:
          description: Badgeachievement updated
          schema:
            $ref: '#/definitions/BadgeAchievement'
    delete:
      summary: Delete badgeachievement with specified
      tags:
        - Badgeachievements
      parameters:
        - name: id
          in: path
          required: true
          type: number
          format: int32
        - $ref: '#/parameters/Token'
      responses:
        204:
          description: Deleted successfully
  
parameters:
  Token:
    name: Authorization
    in: header
    description: Application token
    required: true
    type: string
    format: token
    
  
definitions:
  Application:
    type: object
    properties:
      id:
        type: integer
        format: int32
      name:
        type: string
      password:
        type: string
        
  User:
    type: object
    properties:
      id:
        type: number
        format: int32
      application_id:
        type: number
        format: int32
      username:
        type: string
      level_id:
        type: number
        format: int32
      
  Level:
    type: object
    properties:
      id:
        type: number
        format: int32
      name:
        type: string
      points:
        type: number
        format: int32
      application_id:
        type: number
        format: int32
  
  Badge:
    type: object
    properties:
      id:
        type: number
        format: int32
      name:
        type: string
      description:
        type: string
      application_id:
        type: number
        format: int32
  
  Event:
    type: object
    properties:
      id:
        type: number
        format: int32
      timestamp:
        type: string
        format: date-time
      application_id:
        type: number
        format: int32
      user_id:
        type: number
        format: int32
      eventtype_id:
        type: number
        format: int32
        
  Achievement:
    type: object
    properties:
      id:
        type: number
        format: int32
      count:
        type: number
        format: int32
      eventtype_id:
        type: number
        format: int32
      application_id:
        type: number
        format: int32
      name:
        type: string
        
  Eventtype:
    type: object
    properties:
      id:
        type: number
        format: int32
      name:
        type: string
      points:
        type: number
        format: int32
      application_id:
        type: number
        format: int32
        
  BadgeAchievement:
    type: object
    properties:
      achievement_id:
        type: number
        format: int32
      badge_id:
        type: number
        format: int32
          
  Token:
    type: object
    properties:
      token:
        type: string