package ch.heigvd.amt.gamification.api;

import ch.heigvd.amt.gamification.dao.ApplicationDao;
import ch.heigvd.amt.gamification.dao.EventtypeDao;
import ch.heigvd.amt.gamification.dto.EventCreationDTO;
import ch.heigvd.amt.gamification.errors.ErrorMessageGenerator;
import ch.heigvd.amt.gamification.errors.HttpStatusException;
import ch.heigvd.amt.gamification.model.Application;

import ch.heigvd.amt.gamification.model.Eventtype;
import ch.heigvd.amt.gamification.model.Level;
import ch.heigvd.amt.gamification.security.Authentication;
import io.swagger.annotations.*;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;

import java.util.ArrayList;


@javax.annotation.Generated(value = "class ch.heigvd.amt.gamification.codegen.languages.SpringCodegen", date = "2016-12-18T13:30:19.867Z")

@Controller
public class EventsApiController implements EventsApi {

    @Autowired
    EventtypeDao eventtypeDao;

    @Autowired
    ApplicationDao applicationDao;

    public ResponseEntity<ArrayList<String>> eventsPost(@ApiParam(value = "An event generated by the client application" ,required=true ) @RequestBody ArrayList<EventCreationDTO> events,
                                                       @ApiParam(value = "Application token" ,required=true ) @RequestHeader(value="Authorization", required=true) String authorization) {
        long appId = Authentication.getApplicationId(authorization);

        // Verify payload format
        events.forEach(event -> {
            if (event.getName() == null)
                throw new HttpStatusException(HttpStatus.BAD_REQUEST,
                        ErrorMessageGenerator.fieldMissing("Event", "name"));
            if (event.getCode() == null)
                throw new HttpStatusException(HttpStatus.BAD_REQUEST,
                        ErrorMessageGenerator.fieldMissing("Event", "code"));
            if (event.getPoints() == null)
                throw new HttpStatusException(HttpStatus.BAD_REQUEST,
                        ErrorMessageGenerator.fieldMissing("Event", "points"));
        });

        Application app = applicationDao.findOne(appId);

        ArrayList<String> urls = new ArrayList<>();

        // TODO : transaction
        events.forEach(event -> {
            long eventtypeId = 0;
            Eventtype oldEventtype = eventtypeDao.findByApplicationIdAndCode(appId, event.getCode());

            if (oldEventtype == null) {
                // create the new level
                Eventtype newEventtype = fromCreationDTO(event);
                newEventtype.setApplication(app);
                eventtypeId = eventtypeDao.save(newEventtype).getId();
            } else {
                eventtypeId = oldEventtype.getId();
            }

            urls.add("/events/" + eventtypeId);
        });

        return new ResponseEntity<ArrayList<String>>(urls, HttpStatus.CREATED);
    }

    private Eventtype fromCreationDTO(EventCreationDTO event) {
        return new Eventtype(event);
    }

}
