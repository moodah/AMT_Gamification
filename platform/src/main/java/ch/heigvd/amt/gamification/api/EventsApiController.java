package ch.heigvd.amt.gamification.api;

import ch.heigvd.amt.gamification.dao.*;
import ch.heigvd.amt.gamification.dto.EventCreationDTO;
import ch.heigvd.amt.gamification.dto.EventtypeCreationDTO;
import ch.heigvd.amt.gamification.dto.EventtypePresentationDTO;
import ch.heigvd.amt.gamification.errors.ErrorMessageGenerator;
import ch.heigvd.amt.gamification.errors.HttpStatusException;
import ch.heigvd.amt.gamification.model.*;

import ch.heigvd.amt.gamification.security.Authentication;
import io.swagger.annotations.*;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;

import java.util.ArrayList;
import java.util.Date;


@javax.annotation.Generated(value = "class ch.heigvd.amt.gamification.codegen.languages.SpringCodegen", date = "2016-12-18T13:30:19.867Z")

@Controller
public class EventsApiController implements EventsApi {

    @Autowired
    EventDao eventDao;

    @Autowired
    EventtypeDao eventtypeDao;

    @Autowired
    ApplicationDao applicationDao;

    @Autowired
    UserDao userDao;

    @Autowired
    LevelDao levelDao;

    public ResponseEntity<Void> eventsPost(@ApiParam(value = "An event generated by the client application", required = true) @RequestBody ArrayList<EventCreationDTO> events,
                                           @ApiParam(value = "Application token", required = true) @RequestHeader(value = "Authorization", required = true) String authorization) {
        // Verifiy payload format
        events.forEach(event -> {
            if (event.getCodeEvent() == null)
                throw new HttpStatusException(HttpStatus.BAD_REQUEST,
                        ErrorMessageGenerator.fieldMissing("Event", "code"));

            if (event.getUsername() == null)
                throw new HttpStatusException(HttpStatus.BAD_REQUEST,
                        ErrorMessageGenerator.fieldMissing("Event", "username"));
        });

        long appId = Authentication.getApplicationId(authorization);
        Application application = applicationDao.findOne(appId);

        // TODO : transaction
        events.forEach(event -> {
            Eventtype eventtype = eventtypeDao.findByApplicationIdAndCode(appId, event.getCodeEvent());
            if (eventtype == null)
                throw new HttpStatusException(HttpStatus.BAD_REQUEST,
                        ErrorMessageGenerator.notFoundByField("Eventtype", "code", event.getCodeEvent().toString()));

            // create user if not exist
            User user = userDao.findByUsername(event.getUsername());
            if (user == null) {
                Level level = levelDao.findTopByOrderByPointsAsc();
                User newUser = new User(event.getUsername(), application, level);
                user = userDao.save(newUser);
            }

            // Save event
            eventDao.save(new Event(new Date(), user, eventtype, application));

            // handle user's level
            user.addPoints(eventtype.getPoints());
            System.out.println("eventtype.getPoints(): " + user.getPoints());
            if (user.getPoints().longValue() > user.getLevel().getPoints().longValue()) {
                user.setLevel(levelDao.findTopByPointsLessThanEqualOrderByPointsDesc(user.getPoints()));
            }

            // TODO : handle user's badge. check the rules

            // automatically update user
            userDao.save(user);
        });

        return new ResponseEntity<Void>(HttpStatus.CREATED);
    }

    @Override
    public ResponseEntity<ArrayList<String>> eventsTypePost(@ApiParam(value = "Array of events defined by the client", required = true) @RequestBody ArrayList<EventtypeCreationDTO> events,
                                                            @ApiParam(value = "Application token", required = true) @RequestHeader(value = "Authorization", required = true) String authorization) {
        // Verify payload format
        events.forEach(event -> {
            if (event.getName() == null)
                throw new HttpStatusException(HttpStatus.BAD_REQUEST,
                        ErrorMessageGenerator.fieldMissing("Eventtype", "name"));
            if (event.getCode() == null)
                throw new HttpStatusException(HttpStatus.BAD_REQUEST,
                        ErrorMessageGenerator.fieldMissing("Eventtype", "code"));
            if (event.getPoints() == null)
                throw new HttpStatusException(HttpStatus.BAD_REQUEST,
                        ErrorMessageGenerator.fieldMissing("Eventtype", "points"));
        });

        long appId = Authentication.getApplicationId(authorization);

        Application app = applicationDao.findOne(appId);

        ArrayList<String> urls = new ArrayList<>();

        // TODO : transaction
        events.forEach(event -> {
            long eventtypeId = 0;
            Eventtype oldEventtype = eventtypeDao.findByApplicationIdAndCode(appId, event.getCode());

            if (oldEventtype != null)
                eventtypeDao.delete(oldEventtype);

            // create the new level
            Eventtype newEventtype = fromCreationDTO(event);
            newEventtype.setApplication(app);
            eventtypeId = eventtypeDao.save(newEventtype).getId();

            urls.add("/events/type/" + eventtypeId);
        });

        return new ResponseEntity<ArrayList<String>>(urls, HttpStatus.CREATED);
    }

    @Override
    public ResponseEntity<ArrayList<EventtypePresentationDTO>> eventsTypeGet(@ApiParam(value = "Application token", required = true) @RequestHeader(value = "Authorization", required = true) String authorization) {
        long appId = Authentication.getApplicationId(authorization);

        ArrayList<EventtypePresentationDTO> events = new ArrayList<>();
        eventtypeDao.findAllByApplicationId(appId).forEach(eventtype -> {
            events.add(toPresentationDTO(eventtype));
        });

        return new ResponseEntity<ArrayList<EventtypePresentationDTO>>(events, HttpStatus.OK);
    }

    @Override
    public ResponseEntity<Void> eventsTypeDelete(@ApiParam(value = "Application token", required = true) @RequestHeader(value = "Authorization", required = true) String authorization) {
        long appId = Authentication.getApplicationId(authorization);

        eventtypeDao.delete(eventtypeDao.findAllByApplicationId(appId));

        return new ResponseEntity<Void>(HttpStatus.NO_CONTENT);
    }

    private Eventtype fromCreationDTO(EventtypeCreationDTO event) {
        return new Eventtype(event);
    }

    private EventtypePresentationDTO toPresentationDTO(Eventtype eventtype) {
        return new EventtypePresentationDTO(eventtype);
    }

}
