package ch.heigvd.amt.gamification.api;

import ch.heigvd.amt.gamification.dto.EventCreationDTO;
import ch.heigvd.amt.gamification.dto.EventtypeCreationDTO;

import ch.heigvd.amt.gamification.dto.EventtypePresentationDTO;
import ch.heigvd.amt.gamification.errors.ErrorMessageGenerator;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import java.util.ArrayList;

@javax.annotation.Generated(value = "class ch.heigvd.amt.gamification.codegen.languages.SpringCodegen", date = "2016-12-18T13:30:19.867Z")

@Api(value = "events", description = "the events API")
public interface EventsApi {

    @ApiOperation(value = "Events generated by the client", notes = "The Events endpoint allows the client to submit new events occuring in his app", response = String.class, tags={ "Events", })
    @ApiResponses(value = {
            @ApiResponse(code = 201, message = "Newly created event's URI", response = String.class),
            @ApiResponse(code = 400, message = "Error payload", response = ErrorMessageGenerator.class) })
    @RequestMapping(value = "/events",
            produces = { "application/json" },
            consumes = { "application/json" },
            method = RequestMethod.POST)
    ResponseEntity<Void> eventsPost(@ApiParam(value = "An event generated by the client application" ,required=true ) @RequestBody ArrayList<EventCreationDTO> events,
                                                 @ApiParam(value = "Application token" ,required=true ) @RequestHeader(value="Authorization", required=true) String authorization);

    @ApiOperation(value = "Events types defined by the client", notes = "The Events types endpoint allows the client to register the events which may occur in his application", response = String.class, tags={ "Events", })
    @ApiResponses(value = {
            @ApiResponse(code = 201, message = "Newly created events types URIs", response = String.class),
            @ApiResponse(code = 400, message = "Error payload", response = ErrorMessageGenerator.class) })
    @RequestMapping(value = "/events/type",
            produces = { "application/json" },
            consumes = { "application/json" },
            method = RequestMethod.POST)
    ResponseEntity<ArrayList<String>> eventsTypePost(@ApiParam(value = "Array of events defined by the client" ,required=true ) @RequestBody ArrayList<EventtypeCreationDTO> events,
                                                 @ApiParam(value = "Application token" ,required=true ) @RequestHeader(value="Authorization", required=true) String authorization);

    @ApiOperation(value = "Events types defined by the client", notes = "The Events types endpoint allows the client to register the events which may occur in his application", response = String.class, tags={ "Events", })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "All events types of the application", response = String.class),
            @ApiResponse(code = 400, message = "Error payload", response = ErrorMessageGenerator.class) })
    @RequestMapping(value = "/events/type",
            produces = { "application/json" },
            consumes = { "application/json" },
            method = RequestMethod.GET)
    ResponseEntity<ArrayList<EventtypePresentationDTO>> eventsTypeGet(@ApiParam(value = "Application token" ,required=true ) @RequestHeader(value="Authorization", required=true) String authorization);

    @ApiOperation(value = "Delete all events types", notes = "Delete all events types for this application", response = Void.class, tags={ "Events", })
    @ApiResponses(value = {
            @ApiResponse(code = 204, message = "Deleted successfully", response = Void.class),
            @ApiResponse(code = 200, message = "Error payload", response = Void.class) })
    @RequestMapping(value = "/events/type",
            produces = { "application/json" },
            consumes = { "application/json" },
            method = RequestMethod.DELETE)
    ResponseEntity<Void> eventsTypeDelete(@ApiParam(value = "Application token" ,required=true ) @RequestHeader(value="Authorization", required=true) String authorization);
}
